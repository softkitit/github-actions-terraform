name: |-
  Controller - Initialize terraform state
  
  It creates a tfvars properties file to a given inputs, validate terraform,
  and create a pull request to apply these changes, and generate state and lock in dynamodb
  
  ### Usage 
  
  ```yaml
    name: Initialize terraform state
    on:
      push:
        branches: [ main ]
    jobs:
      init_state:
        uses: softkitit/github-actions-terraform/.github/workflows/controller-initialize-terraform-state.yml@main
        with:
          organization: $\{\{ github.event.repository.owner.login \}\}
          repository-name: $\{\{ github.event.repository.name \}\}
          aws-access-key-id: $\{\{ inputs.aws-access-key-id \}\}
          aws-secret-access-key: $\{\{ inputs.aws-secret-access-key \}\}
          aws-session-token: $\{\{ inputs.aws-session-token \}\}
          aws-region: eu-central-1
          terraform-folder: '.'
        secrets: inherit
  
    on:
      workflow_dispatch:
        inputs:
          aws-access-key-id:
            description: "AWS Access Key ID"
            required: true
          aws-secret-access-key:
            description: "AWS Secret Access Key"
            required: true
          aws-session-token:
            description: "AWS Session Token"
            required: true
          environment:
            description: "Environment name (master, prod, dev, security, etc...)"
            required: true
  ```

permissions:
  # Give the default GITHUB_TOKEN write permission to commit and push the
  # added or changed files to the repository.
  contents: write
  pull-requests: write
  id-token: write

concurrency:
  group: ${{ github.workflow }}-${{ inputs.environment }}
  cancel-in-progress: false

env:
  BRANCH_NAME: terraform-state/${{inputs.environment}}-${{ github.run_id }}-${{ github.run_attempt }}
  TF_STATE_FILE_NAME: ${{ inputs.environment }}-${{ inputs.tf-state-file-name || format('{0}-terraform.tfstate', inputs.project-name || inputs.repository-name) }}
  DYNAMODB_TABLE_NAME: ${{ inputs.dynamo-db-table-name || format('{0}-{1}-{2}', inputs.environment, inputs.organization, inputs.project-name || inputs.repository-name) }}
  S3_BUCKET_NAME: ${{ inputs.s3-bucket-name || format('{0}-{1}-{2}', inputs.environment, inputs.organization, inputs.project-name || inputs.repository-name) }}

jobs:
  init_state:
    name: Perform terraform state initialization
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}

      - name: Get env information
        id: env
        uses: softkitit/github-actions-terraform/actions/environment-information@main
        with:
          environment: ${{ inputs.environment }}

      - name: Build terraform files paths
        id: tf
        uses: softkitit/github-actions-terraform/actions/terraform-paths@main
        with:
          environment: ${{ inputs.environment }}
          terraform-folder: ${{ inputs.terraform-folder }}

      - name: Configure AWS credentials through OIDC
        if: ${{ !inputs.aws-secret-access-key && steps.tf.outputs.files-exist == 'false' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars[steps.env.outputs.aws-region-key] }}
          role-to-assume: arn:aws:iam::${{ vars[steps.env.outputs.aws-account-id-key] }}:role/${{ inputs.role-name }}

      - name: Configure AWS Credentials through provided credentials
        if: ${{ inputs.aws-secret-access-key && steps.tf.outputs.files-exist == 'false' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ inputs.aws-region }}
          aws-access-key-id: ${{ inputs.aws-access-key-id }}
          aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
          aws-session-token: ${{ inputs.aws-session-token }}

      - name: Get terraform version
        if: ${{ steps.tf.outputs.files-exist == 'false' }}
        uses: dflook/terraform-version@v1
        id: tf-version
        with:
          path: ${{ steps.tf.outputs.root }}

      - uses: hashicorp/setup-terraform@v3
        if: ${{ steps.tf.outputs.files-exist == 'false' }}
        with:
          terraform_version: ${{ steps.tf-version.outputs.terraform }}
          terraform_wrapper: false

      - name: Remove backend mock file, it's not needed for initialization stage and must be removed
        if: ${{ steps.tf.outputs.files-exist == 'false' }}
        working-directory: ${{ steps.tf.outputs.root }}
        run: rm ${{ inputs.mock-backend-file-name }} || 0

      - name: Generate vars file
        if: ${{ steps.tf.outputs.files-exist == 'false' }}
        run: | 
          echo 'environment = "${{ inputs.environment }}"' > ${{ steps.tf.outputs.vars-file }} 
          echo 'aws_region = "${{ inputs.aws-region || vars[steps.env.outputs.aws-region-key] }}"' >> ${{ steps.tf.outputs.vars-file }} 
          echo 'repository_name = "${{ inputs.repository-name }}"' >> ${{ steps.tf.outputs.vars-file }} 
          echo 'project_name = "${{ inputs.project-name || inputs.repository-name }}"' >> ${{ steps.tf.outputs.vars-file }} 
          echo 'org_name = "${{ inputs.organization }}"' >> ${{ steps.tf.outputs.vars-file }} 
          echo "tf_state_file_name = \"${TF_STATE_FILE_NAME}\"" >> ${{ steps.tf.outputs.vars-file }} 
          echo "dynamo_db_table_name = \"${DYNAMODB_TABLE_NAME}\"" >> ${{ steps.tf.outputs.vars-file }}
          echo "s3_bucket_name = \"${S3_BUCKET_NAME}\"" >> ${{ steps.tf.outputs.vars-file }}

      - name: Terraform Init
        if: ${{ steps.tf.outputs.files-exist == 'false' }}
        working-directory: ${{ steps.tf.outputs.root }}
        run: terraform init -var-file="${{ steps.tf.outputs.vars-file-relative-path }}" -no-color -target="module.${{ inputs.tf-state-module-name }}" -target="module.${{ inputs.oidc-module-name }}"

      - name: Terraform Plan
        if: ${{ steps.tf.outputs.files-exist == 'false' }}
        working-directory: ${{ steps.tf.outputs.root }}
        id: plan
        run: terraform plan -var-file="${{ steps.tf.outputs.vars-file-relative-path }}" -no-color -target="module.${{ inputs.tf-state-module-name }}" -target="module.${{ inputs.oidc-module-name }}"

      - name: Terraform Apply
        if: ${{ steps.tf.outputs.files-exist == 'false' }}
        working-directory: ${{ steps.tf.outputs.root }}
        id: apply
        run: terraform apply -auto-approve -var-file="${{ steps.tf.outputs.vars-file-relative-path }}" -no-color -target="module.${{ inputs.tf-state-module-name }}" -target="module.${{ inputs.oidc-module-name }}"

      - name: Generate backend HCL file
        if: ${{ steps.tf.outputs.files-exist == 'false' }}
        run: |
          echo 'region         = "${{ inputs.aws-region || vars[steps.env.outputs.aws-region-key] }}"' > ${{ steps.tf.outputs.backend-file }}
          echo "bucket         = \"${S3_BUCKET_NAME}\"" >> ${{ steps.tf.outputs.backend-file }}
          echo "key            = \"${TF_STATE_FILE_NAME}\"" >> ${{ steps.tf.outputs.backend-file }}
          echo 'profile        = ""' >> ${{ steps.tf.outputs.backend-file }}
          echo 'encrypt        = "true"' >> ${{ steps.tf.outputs.backend-file }}
          echo "dynamodb_table = \"${DYNAMODB_TABLE_NAME}\"" >> ${{ steps.tf.outputs.backend-file }}

      - name: Copy local state to the remote
        id: force-copy
        if: ${{ steps.tf.outputs.files-exist == 'false' }}
        working-directory: ${{ steps.tf.outputs.root }}
        run: |
          git restore ${{ inputs.mock-backend-file-name }}
          terraform init -force-copy -var-file="${{ steps.tf.outputs.vars-file-relative-path }}"  -backend-config="${{ steps.tf.outputs.backend-file-relative-path }}" -no-color

      - uses: stefanzweifel/git-auto-commit-action@v5
        if: ${{ steps.tf.outputs.files-exist == 'false' }}
        with:
          commit_message: Generated state for env - ${{ inputs.environment }}
          branch: ${{ (inputs.push-mode == 'pull-request' && env.BRANCH_NAME) || '' }}
          commit_options: '--no-verify --signoff'
          file_pattern: "*${{ steps.tf.outputs.vars-file }} *${{ steps.tf.outputs.backend-file }}"
          commit_user_name: ${{ github.actor }}
          commit_user_email: ${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com
          status_options: '--untracked-files=no'
          skip_dirty_check: true
          skip_fetch: true
          skip_checkout: true
          disable_globbing: true
          create_branch: ${{ inputs.push-mode == 'pull-request' }}

      - name: Create Pull Request
        if: ${{ inputs.push-mode == 'pull-request' && steps.tf.outputs.files-exist == 'false' }}
        run: gh pr create -B main -H $BRANCH_NAME --title 'Merge generated credentials for ${{ inputs.environment }} environment' --body 'Created by Github action, for environment - ${{ inputs.environment }}'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check needed destroy
        id: destroy
        working-directory: ${{ steps.tf.outputs.root }}
        if: steps.tf.outputs.files-exist == 'false' && failure()
        env:
          TF_VAR_force_destroy: true
          TF_VAR_dynamo_db_table_name: ""
          TF_VAR_s3_bucket_name: ""
          TF_VAR_tf_state_file_name: ""
          TF_VAR_environment: ${{ inputs.environment }}
          TF_VAR_aws_region: ${{ inputs.aws-region }}
          TF_VAR_repository_name: ${{ inputs.repository-name }}
          TF_VAR_project_name: ${{ inputs.project-name || inputs.repository-name }}
          TF_VAR_org_name: ${{ inputs.organization }}

        run: |
          rm ${{ inputs.mock-backend-file-name }} || true
          terraform init -force-copy
          terraform apply -destroy -auto-approve -no-color -target="module.${{ inputs.tf-state-module-name }}" -target="module.${{ inputs.oidc-module-name }}" 
          exit 1

on:
  workflow_call:
    inputs:
      aws-access-key-id:
        description: "AWS Access Key ID"
        type: string
        required: false

      aws-secret-access-key:
        description: "AWS Secret Access Key"
        type: string
        required: false

      aws-session-token:
        description: "AWS Session Token"
        type: string
        required: false

      aws-region:
        description: "AWS Region"
        type: string
        required: false

      environment:
        description: "Environment name (master, prod, dev, security, etc...)"
        type: string
        required: true

      tf-state-file-name:
        description: "Terraform file state name on a remote"
        type: string
        required: false

      dynamo-db-table-name:
        description: "DynamoDB table name"
        type: string
        required: false

      s3-bucket-name:
        description: "S3 Bucket name"
        type: string
        required: false

      mock-backend-file-name:
        description: "Mock backend file name, required for external backend files in terraform name"
        type: string
        default: "backend.tf"
        required: false

      organization:
        description: "Repository owner organization"
        required: true
        type: string

      repository-name:
        description: "Git repository name, to understand where the particular resource is managed"
        required: true
        type: string

      project-name:
        description: "For monorepo choose the appropriate name for project for poly repo use repository name)"
        required: false
        type: string

      terraform-folder:
        description: "Root folder path for terraform files"
        type: string
        required: false

      push-mode:
        description: "Control whether to commit and push changes to current branch or create a pull request. Available values - (pull-request, same-branch)"
        type: string
        required: false
        default: "same-branch"

      role-name:
        description: "Default role name to assume for the terraform state initialization"
        type: string
        required: false
        default: "github"

      tf-state-module-name:
        description: "The name of tf state module in terraform files"
        type: string
        required: false
        default: "terraform_state_backend"

      oidc-module-name:
        description: "The name of oidc module in terraform files"
        type: string
        required: false
        default: "oidc_github"

      allow-destroy:
        description: "Allow to destroy state in case of failure, it's safer to do not do it implicitly"
        type: boolean
        required: false
        default: false

