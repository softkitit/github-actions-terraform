name: |-
  Controller - Unlock Terraform State
  
  It helps to unlock the remote terraform state by lock id
  
  ### Usage 
  
  ```yaml
    name: Unlock state
    
    permissions:
      id-token: write
      contents: read
    
    jobs:
      unlock_state:
        uses: softkitit/github-actions-terraform/.github/workflows/controller-unlock-terraform-state.yml@main
        with:
          lock-id: $\{\{ inputs.lock-id \}\}
          environment: $\{\{ inputs.environment \}\}
          terraform-folder: '.'
        secrets: inherit
  
    on:
      workflow_dispatch:
        inputs:
          lock-id:
            description: "Lock id"
            required: true
          environment:
            description: "Environment to apply changes to"
            required: true
            type: choice
            options:
              - dev
              - prod
  ```

permissions:
  id-token: write
  contents: read

concurrency:
  group: ${{ inputs.environment }}
  cancel-in-progress: true

jobs:
  unlock:
    name: Unlock
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.terraform-folder }}
    steps:
      - name: Checkout current branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}

      - name: Get env information
        id: env
        uses: softkitit/github-actions-terraform/actions/environment-information@main
        with:
          environment: ${{ inputs.environment }}

      - name: Build terraform files paths
        id: tf
        uses: softkitit/github-actions-terraform/actions/terraform-paths@main
        with:
          environment: ${{ inputs.environment }}
          terraform-folder: ${{ inputs.terraform-folder }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars[steps.env.outputs.aws-region-key] }}
          role-to-assume: arn:aws:iam::${{ vars[steps.env.outputs.aws-account-id-key] }}:role/${{ inputs.roleName }}

      - name: Terraform Unlock
        uses: dflook/terraform-unlock-state@v1
        with:
          path: ${{ steps.tf.outputs.root }}
          backend_config_file: ${{ steps.tf.outputs.backend-file }}
          var_file: ${{ steps.tf.outputs.vars-file }}
          lock_id: ${{ inputs.lock-id }}
          auto_approve: true

on:
  workflow_call:
    inputs:
      environment:
        description: "Environment name (master, prod, dev, security, etc...)"
        type: string
        required: true

      terraform-folder:
        description: "Root folder path for terraform files"
        type: string
        required: false
        default: "."

      lock-id:
        description: "Lock ID to be unlocked"
        type: string
        required: true

      role-name:
        description: "AWS role name to assume for the terraform state initialization"
        type: string
        required: false
        default: "github"
